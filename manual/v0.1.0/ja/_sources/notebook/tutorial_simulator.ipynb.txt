{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# simulatorクラスの定義\n",
    "\n",
    "\n",
    "PHYSBOではSimulator関数を使用して目的関数を定義します。\n",
    "ここでは、一次元の関数の最小値を求める例題をもとに、simulatorクラスの定義方法について紹介します。\n",
    "\n",
    "## 探索空間の定義\n",
    "\n",
    "その他のチュートリアルと同じように、最初に関数を探索する空間を定義します。\n",
    "以下の例では、探索空間``X``を ``x_min = -2.0``から``x_max = 2.0``まで``window_num=10001``分割で刻んだグリッドで定義しています。\n",
    "なお、``X``は ``window_num`` x ``d`` のndarray形式にする必要があります(``d``は次元数、この場合は2次元)。そのため、reshapeを行って変形しています。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#In\n",
    "import numpy as np\n",
    "import scipy\n",
    "import physbo\n",
    "import os\n",
    "import urllib\n",
    "import itertools\n",
    "\n",
    "#In\n",
    "#Create candidate\n",
    "window_num=10001\n",
    "x_max = 2.0\n",
    "x_min = -2.0\n",
    "\n",
    "X = np.linspace(x_min,x_max,window_num).reshape(window_num, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## simulatorクラスの定義\n",
    "\n",
    "目的関数を定義するためのsimulatorクラスをここで定義します。\n",
    "\n",
    "今回はf(x) = 3 x^4 + 4 x ^3 + 1.0 が最小となるxを探索するという問題設定にしています(答えはx=-1.0)。\n",
    "\n",
    "simulatorクラスでは、``__call__``関数を定義します(初期変数などがある場合は``__init__``を定義します)。\n",
    "actionは探索空間の中から取り出すグリッドのindex番号を示しており、複数の候補を一度に計算できるように一般的にndarrayの形式を取っています。\n",
    "今回は一つの候補のみを毎回計算するため、``action_idx=action[0]``として``X``から候補点を一つ選んでいます。\n",
    "PHYSBOでは目的関数値が最大となるものを求める仕様になっているため、候補点でのf(x)の値に-1をかけたものを返しています。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Declare the class for calling the simulator.\n",
    "class simulator:\n",
    "\n",
    "    def __call__(self, action ):\n",
    "        action_idx = action[0]\n",
    "        x = X[action_idx][0]\n",
    "        fx = 3.0*x**4 + 4.0*x**3 + 1.0\n",
    "        fx_list.append(fx)\n",
    "        x_list.append(X[action_idx][0])\n",
    "\n",
    "        print (\"*********************\")\n",
    "        print (\"Present optimum interactions\")\n",
    "\n",
    "        print (\"x_opt=\", x_list[np.argmin(np.array(fx_list))])\n",
    "\n",
    "        return -fx, x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ランダムサーチ\n",
    "\n",
    "ベイズ最適化を行う前に、探索空間からランダムに候補点を選び目的関数値を評価することで、事前にトレーニングデータを用意します(飛ばすことも可能です)。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fx_list=[]\n",
    "x_list = []\n",
    "#In\n",
    "# Design of policy\n",
    "# Declaring the policy by\n",
    "policy = physbo.search.discrete.policy(test_X=X)\n",
    "# test_X is the set of candidates which is represented by numpy.array.\n",
    "# Each row vector represents the feature vector of the corresponding candidate\n",
    "\n",
    "# set the seed parameter\n",
    "policy.set_seed( 1 )\n",
    "\n",
    "\n",
    "# If you want to perform the initial random search before starting the Bayesian optimization,\n",
    "# the random sampling is performed by\n",
    "\n",
    "res = policy.random_search(max_num_probes=50, simulator=simulator())\n",
    "# Input:\n",
    "# max_num_probes: number of random search\n",
    "# simulator = simulator\n",
    "# output: combo.search.discreate.results (class)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ベイズ最適化\n",
    "\n",
    "定義したsimulatorに対してベイズ最適化を実施します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# single query Bayesian search\n",
    "# The single query version of COMBO is performed by\n",
    "res = policy.bayes_search(max_num_probes= 150, simulator=simulator(), score='TS',\n",
    "                                                  interval=20, num_rand_basis=5000)\n",
    "\n",
    "# Input\n",
    "# max_num_probes: number of searching by Bayesian optimization\n",
    "# simulator: the class of simulator which is defined above\n",
    "# score: the type of aquision funciton. TS, EI and PI are available\n",
    "# interval: the timing for learning the hyper parameter.\n",
    "#               In this case, the hyper parameter is learned at each 20 steps\n",
    "#               If you set the negative value to interval, the hyper parameter learning is not performed\n",
    "#               If you set zero to interval, the hyper parameter learning is performed only at the first step\n",
    "# num_rand_basis: the number of basis function. If you choose 0,  ordinary Gaussian process runs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 結果表示\n",
    "\n",
    "得られた結果のうち、一番よいスコアを持つものは``export_all_sequence_best_fx()``を用いることで取り出すことができます。\n",
    "また、これまでの全ての履歴をみたい場合には、``chosed_actions``を呼び出すことで表示することができます。以下、結果を表示するサンプルスクリプトを記載します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a20757e10>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#In\n",
    "best_fx, best_action = res.export_all_sequence_best_fx()\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "# The result of searching is summarized in the class combo.search.discrete.results.history()\n",
    "# res.fx: observed negative energy at each step\n",
    "# res.chosed_actions: history of choosed actions\n",
    "# fbest, best_action= res.export_all_sequence_best_fx(): current best fx and current best action\n",
    "#                                                                                                   that has been observed until each step\n",
    "# res.total_num_search: total number of search\n",
    "plt.plot(res.fx[0:res.total_num_search])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a20996710>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(best_fx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a20b4dcd0>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(best_action)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "最後に、一番よいスコアを持つ候補は以下のようにして表示することができます。正しい解 x=-1に行き着いていることがわかります。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.]\n"
     ]
    }
   ],
   "source": [
    "print(X[int(best_action[-1])])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
