{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PHYSBO の基本\n",
    "\n",
    "## はじめに\n",
    "\n",
    "\n",
    "本チュートリアルでは例として、Cuの安定した界面構造の探索問題を扱います。 目的関数の評価にあたる構造緩和計算には、実際には1回あたり数時間といったオーダーの時間を要しますが、本チュートリアルでは既に評価済みの値を使用します。問題設定については、以下の文献を参照してください。\n",
    "\n",
    "- S. Kiyohara, H. Oda, K. Tsuda and T. Mizoguchi, “Acceleration of stable interface structure searching using a kriging approach”, Jpn. J. Appl. Phys. 55, 045502 (2016).\n",
    "\n",
    "---\n",
    "\n",
    "それではサンプルデータを用いて、各手順を実際に行ってみましょう。\n",
    "\n",
    "はじめに、PHYSBOをインポートします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import physbo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 探索候補データの準備\n",
    "\n",
    "まず、以下を実行してサンプルデータをダウンロードしてください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import urllib2\n",
    "import ssl\n",
    "import numpy as np\n",
    "\n",
    "ssl._create_default_https_context = ssl._create_unverified_context\n",
    "        \n",
    "def load_data():\n",
    "    A =  np.asarray(np.loadtxt('data/s5-210.csv',skiprows=1, delimiter=',') )\n",
    "    X = A[:,0:3]\n",
    "    t  = -A[:,3]\n",
    "    return X, t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, t = load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "以下、N: 探索候補の数  , d: 入力パラメータの次元数  とします。\n",
    "\n",
    "X は N x d 次元の行列で、各行は探索候補である各パラメータセット (d 次元のベクトル) を表します。  \n",
    "t は N 次元のベクトルで、各探索候補の負のエネルギー(最適化したい目的関数の値) と対応します。\n",
    "※ 通常、ベイズ最適化を行う際は、Xのみを与え、tは存在しない状況からスタートします。そのため、実際に利用する際には、tの値はベイズ最適化の候補提案を受け、simulatorで評価することではじめて値が得られます。ここではチュートリアルのためにtをあらかじめ与えています。  \n",
    "\n",
    "**PHYSBO では最適化の方向は「最大化」だと仮定します。**  \n",
    "\n",
    "そのため、元々の問題設定は「エネルギー最小化」ですが、PHYSBOで最適化を行うにあたって、目的関数値にマイナスを掛けて「負のエネルギーの最大化」問題として扱っています。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0. , 1. , 0. ],\n",
       "       [0. , 1. , 0.1],\n",
       "       [0. , 1. , 0.2],\n",
       "       ...,\n",
       "       [8. , 1.5, 3.4],\n",
       "       [8. , 1.5, 3.5],\n",
       "       [8. , 1.5, 3.6]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.01301176, -1.01487066, -1.02044168, ..., -1.11680203,\n",
       "       -2.48876352, -2.4971452 ])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "探索パラメータのスケールを合わせるため、X の各列についてそれぞれ、平均が0, 分散が 1 となるように標準化します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = physbo.misc.centering( X )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.71079785, -1.46385011, -1.68585446],\n",
       "       [-1.71079785, -1.46385011, -1.59219588],\n",
       "       [-1.71079785, -1.46385011, -1.4985373 ],\n",
       "       ...,\n",
       "       [ 1.71079785,  1.46385011,  1.4985373 ],\n",
       "       [ 1.71079785,  1.46385011,  1.59219588],\n",
       "       [ 1.71079785,  1.46385011,  1.68585446]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## simulator の定義\n",
    "\n",
    "PHYSBO に与える simulator クラスを定義します。  \n",
    "`__call__` メソッドの返り値が、action を与えたときの目的関数値となります。  \n",
    "action は探索候補の ID (0, 1, ..., N-1) を表します。\n",
    "\n",
    "本チュートリアルでは、action が与えられたときに、既に計算された t の値をそのまま返すだけの simulator を定義しています。  \n",
    "他の問題に適用する際は、simulator クラスをカスタマイズしてください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "class simulator:\n",
    "    def __init__( self ):\n",
    "        _, self.t = load_data()\n",
    "    \n",
    "    def __call__( self, action ):\n",
    "        return self.t[action]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 最適化の実行"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### policy のセット\n",
    "\n",
    "まず、最適化の `policy` をセットします。  \n",
    "\n",
    "`test_X` に探索候補の行列 (`numpy.array`) を指定します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# policy のセット \n",
    "policy = physbo.search.discrete.policy(test_X=X)\n",
    "\n",
    "# シード値のセット \n",
    "policy.set_seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`policy` をセットした段階では、まだ最適化は行われません。\n",
    "`policy` に対して以下のメソッドを実行することで、最適化を行います。\n",
    "\n",
    "- `random_search`  \n",
    "- `bayes_search`\n",
    "\n",
    "これらのメソッドに先ほど定義した `simulator` と探索ステップ数を指定すると、探索ステップ数だけ以下のループが回ります。\n",
    "\n",
    "i) パラメータ候補の中から次に実行するパラメータを選択\n",
    "\n",
    "ii) 選択されたパラメータで `simulator` を実行\n",
    "\n",
    "i) で返されるパラメータはデフォルトでは1つですが、1ステップで複数のパラメータを返すことも可能です。\n",
    "詳しくは「複数候補を一度に探索する」の項目を参照してください。  \n",
    "\n",
    "また、上記のループを PHYSBO の中で回すのではなく、i) と ii) を別個に外部から制御することも可能です。つまり、PHYSBO から次に実行するパラメータを提案し、その目的関数値をPHYBOの外部で何らかの形で評価し（例えば、数値計算ではなく、実験による評価など）、それをPHYSBOの外部で何らかの形で提案し、評価値をPHYSBOに登録する、という手順が可能です。詳しくは、チュートリアルの「インタラクティブに実行する」の項目を参照してください。\n",
    "\n",
    "### ランダムサーチ\n",
    "\n",
    "まず初めに、ランダムサーチを行ってみましょう。\n",
    "\n",
    "ベイズ最適化の実行には、目的関数値が2つ以上求まっている必要があるため（初期に必要なデータ数は、最適化したい問題、パラメータの次元dに依存して変わります）、まずランダムサーチを実行します。   \n",
    "\n",
    "**引数**  \n",
    "\n",
    "- `max_num_probes`: 探索ステップ数  \n",
    "- `simulator`: 目的関数のシミュレータ (simulator クラスのオブジェクト) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = policy.random_search(max_num_probes=20, simulator=simulator())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "実行すると、各ステップの目的関数値とその action ID、現在までのベスト値とその action ID が以下のように出力されます。\n",
    "\n",
    "```\n",
    "0020-th step: f(x) = -1.048733 (action=1022)\n",
    "   current best f(x) = -0.963795 (best action=5734) \n",
    "```\n",
    "\n",
    "\n",
    "### ベイズ最適化\n",
    "\n",
    "続いて、ベイズ最適化を以下のように実行します。\n",
    "\n",
    "**引数**  \n",
    "\n",
    "- `max_num_probes`: 探索ステップ数  \n",
    "- `simulator`: 目的関数のシミュレータ (simulator クラスのオブジェクト)  \n",
    "- `score`: 獲得関数(acquisition function) のタイプ。以下のいずれかを指定します。\n",
    "    - TS (Thompson Sampling)  \n",
    "    - EI (Expected Improvement)  \n",
    "    - PI (Probability of Improvement)  \n",
    "- `interval`:  \n",
    "指定したインターバルごとに、ハイパーパラメータを学習します。  \n",
    "負の値を指定すると、ハイパーパラメータの学習は行われません。  \n",
    "0 を指定すると、ハイパーパラメータの学習は最初のステップでのみ行われます。  \n",
    "- `num_rand_basis`: 基底関数の数。0を指定すると、Bayesian linear modelを利用しない通常のガウス過程が使用されます。  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = policy.bayes_search(max_num_probes=80, simulator=simulator(), score='TS', \n",
    "                                                  interval=20, num_rand_basis=5000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 結果の確認\n",
    "\n",
    "探索結果 res は history クラスのオブジェクト (`physbo.search.discrete.results.history`) として返されます。  \n",
    "以下より探索結果を参照します。\n",
    "\n",
    "- `res.fx` : simulator (目的関数) の評価値の履歴。\n",
    "- `res.chosed_actions`: simulator を評価したときの action ID (パラメータ) の履歴。  \n",
    "- `fbest, best_action= res.export_all_sequence_best_fx()`: simulator を評価した全タイミングにおけるベスト値とその action ID (パラメータ)の履歴。\n",
    "- `res.total_num_search`: simulator のトータル評価数。\n",
    "\n",
    "各ステップでの目的関数値と、ベスト値の推移をプロットしてみましょう。  \n",
    "`res.fx`, `best_fx` はそれぞれ `res.total_num_search` までの範囲を指定します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a1c5ae050>]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(res.fx[0:res.total_num_search])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a1c6e41d0>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_fx, best_action = res.export_all_sequence_best_fx()\n",
    "plt.plot(best_fx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 結果のシリアライズ\n",
    "\n",
    "探索結果は `save` メソッドにより外部ファイルに保存できます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "res.save('search_result.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "del res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "保存した結果ファイルは以下のようにロードします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = physbo.search.discrete.results.history()\n",
    "res.load('search_result.npz')"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
